const Booking = require("../../models/Booking/Booking");
require("dotenv").config();
const nodemailer = require("nodemailer"); // ƒê·∫£m b·∫£o d√≤ng n√†y c√≥ tr∆∞·ªõc

const sendBookingEmail = async (booking) => {
    try {
        const populatedBooking = await Booking.findById(booking._id).populate("tourId");

        if (!populatedBooking || !populatedBooking.tourId) {
            console.error("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin tour cho booking:", booking._id);
            return;
        }

        const { tourId } = populatedBooking;
        const tourName = tourId.tour || "Ch∆∞a x√°c ƒë·ªãnh";
        const tourPrice = tourId.price ? tourId.price.toLocaleString() + " VND" : "Ch∆∞a c√≥ gi√°";
        const customerName = booking.fullName || "Kh√¥ng c√≥ t√™n";
        const customerEmail = booking.email || "Kh√¥ng c√≥ email";
        const customerPhone = booking.phone || "Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i";
        const numberOfPeople = booking.numberOfPeople || 1; // M·∫∑c ƒë·ªãnh 1 n·∫øu kh√¥ng c√≥ gi√° tr·ªã

        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: process.env.EMAIL_ADMIN,
                pass: process.env.EMAIL_PASS
            }
        });

        const mailOptions = {
            from: process.env.EMAIL_ADMIN,
            to: [customerEmail, "cuulongvivu@gmail.com"], 
            replyTo: process.env.EMAIL_ADMIN,
            subject: "üõéÔ∏è X√°c nh·∫≠n ƒë·∫∑t tour",
            html: `
                <h2>Th√¥ng tin ƒë·∫∑t tour</h2>
                <p><strong>Kh√°ch h√†ng:</strong> ${customerName} (${customerEmail})</p>
                <p><strong>Tour:</strong> ${tourName}</p>
                <p><strong>Gi√°:</strong> ${tourPrice}</p>
                <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ${customerPhone}</p>
                <p><strong>S·ªë l∆∞·ª£ng ng∆∞·ªùi:</strong> ${numberOfPeople} ng∆∞·ªùi</p>
                <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t tour v·ªõi ch√∫ng t√¥i! üéâ</p>
            `
        };

        await transporter.sendMail(mailOptions);
        console.log("‚úÖ Email booking ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi kh√°ch h√†ng v√† cuulongvivu@gmail.com!");
    } catch (error) {
        console.error("‚ùå L·ªói g·ª≠i email:", error);
    }
};

// ƒê·∫∑t tour m·ªõi
const createBooking = async (req, res) => {
    try {
        const newBooking = new Booking(req.body);
        await newBooking.save();
        // G·ª≠i email th√¥ng b√°o cho nh√¢n vi√™n
        await sendBookingEmail(newBooking);
        res.status(201).json(newBooking);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
};

// L·∫•y t·∫•t c·∫£ booking
const getAllBookings = async (req, res) => {
    try {
        const bookings = await Booking.find().populate("tourId");
        res.status(200).json(bookings);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// L·∫•y booking theo email ng∆∞·ªùi d√πng
const getBookingsByEmail = async (req, res) => {
    try {
        const { email } = req.params;
        const bookings = await Booking.find({ email }).populate("tourId");
        res.status(200).json(bookings);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

module.exports = { createBooking, getAllBookings, getBookingsByEmail };
